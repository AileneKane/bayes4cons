TT <- 20
z <- numeric(TT + 1)
# Population starts at 20 (number of individual re-introduced)
z[1] <- 20
# Standard deviation of the process variation
sdo <- 5
sdp <- 0.05
beta0 <- log(1.3)
beta1 <- -0.005
# Set the seed, so we can reproduce the results
set.seed(123)
# For-loop that simulates the state through time, using i instead of t,
for(i in 1:TT){
# This is the process equation
z[i+1] <- z[i]*exp(beta0 + beta1*z[i] + rnorm(1, 0, sdp))
# Note that this index is shifted compared to equation in text,
# because we assume the first value to be at time 0
}
# Create a vector that will keep track of the observations
# It's of length T
y <- numeric(TT)
# Standard deviation of the observation error
# For t=1, ... T, add measurement error
# Remember that z[1] is t=0
y <- z[2:(TT+1)] + rnorm(TT, 0, sdo)
monitoring <- data.frame(year = seq(2024-TT, length.out = TT), true = z[-1], obs = y)
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real, "Observed" = col_obs)) +
ylab("Population/count") +
theme_bw()
# Set the seed, so we can reproduce the results
set.seed(987)
# For-loop that simulates the state through time, using i instead of t,
for(i in 1:TT){
# This is the process equation
z[i+1] <- z[i]*exp(beta0 + beta1*z[i] + rnorm(1, 0, sdp))
# Note that this index is shifted compared to equation in text,
# because we assume the first value to be at time 0
}
# Create a vector that will keep track of the observations
# It's of length T
y <- numeric(TT)
# For t=1, ... T, add measurement error
# Remember that z[1] is t=0
y <- z[2:(TT+1)] + rnorm(TT, 0, sdo)
# Create a vector that will keep track of the states
# It's of length T + 1 (+1 for t=0)
TT <- 20
z <- numeric(TT + 1)
# Population starts at 20 (number of individual re-introduced)
z[1] <- 20
# Standard deviation of the process variation
sdo <- 5
sdp <- 0.05
beta0 <- log(1.3)
beta1 <- -0.005
# Set the seed, so we can reproduce the results
set.seed(987)
# For-loop that simulates the state through time, using i instead of t,
for(i in 1:TT){
# This is the process equation
z[i+1] <- z[i]*exp(beta0 + beta1*z[i] + rnorm(1, 0, sdp))
# Note that this index is shifted compared to equation in text,
# because we assume the first value to be at time 0
}
# Create a vector that will keep track of the observations
# It's of length T
y <- numeric(TT)
# Standard deviation of the observation error
# For t=1, ... T, add measurement error
# Remember that z[1] is t=0
y <- z[2:(TT+1)] + rnorm(TT, 0, sdo)
monitoring <- data.frame(year = seq(2024-TT, length.out = TT), true = z[-1], obs = y)
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real, "Observed" = col_obs)) +
ylab("Population/count") +
theme_bw()
# Create a vector that will keep track of the states
# It's of length T + 1 (+1 for t=0)
TT <- 20
z <- numeric(TT + 1)
# Population starts at 20 (number of individual re-introduced)
z[1] <- 20
# Standard deviation of the process variation
sdo <- 5
sdp <- 0.05
beta0 <- log(1.3)
beta1 <- -0.005
# Set the seed, so we can reproduce the results
set.seed(123)
# For-loop that simulates the state through time, using i instead of t,
for(i in 1:TT){
# This is the process equation
z[i+1] <- z[i]*exp(beta0 + beta1*z[i] + rnorm(1, 0, sdp))
# Note that this index is shifted compared to equation in text,
# because we assume the first value to be at time 0
}
# Create a vector that will keep track of the observations
# It's of length T
y <- numeric(TT)
# Standard deviation of the observation error
# For t=1, ... T, add measurement error
# Remember that z[1] is t=0
y <- z[2:(TT+1)] + rnorm(TT, 0, sdo)
monitoring <- data.frame(year = seq(2024-TT, length.out = TT), true = z[-1], obs = y)
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real, "Observed" = col_obs)) +
ylab("Population/count") +
theme_bw()
# Create a vector that will keep track of the states
# It's of length T + 1 (+1 for t=0)
TT <- 20
z <- numeric(TT + 1)
# Population starts at 20 (number of individual re-introduced)
z[1] <- 20
# Standard deviation of the process variation
sdo <- 6
sdp <- 0.05
beta0 <- log(1.3)
beta1 <- -0.005
# Set the seed, so we can reproduce the results
set.seed(123)
# For-loop that simulates the state through time, using i instead of t,
for(i in 1:TT){
# This is the process equation
z[i+1] <- z[i]*exp(beta0 + beta1*z[i] + rnorm(1, 0, sdp))
# Note that this index is shifted compared to equation in text,
# because we assume the first value to be at time 0
}
# Create a vector that will keep track of the observations
# It's of length T
y <- numeric(TT)
# Standard deviation of the observation error
# For t=1, ... T, add measurement error
# Remember that z[1] is t=0
y <- z[2:(TT+1)] + rnorm(TT, 0, sdo)
monitoring <- data.frame(year = seq(2024-TT, length.out = TT), true = z[-1], obs = y)
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real, "Observed" = col_obs)) +
ylab("Population/count") +
theme_bw()
monitoring <- data.frame(year = seq(2024-TT, length.out = TT), true = z[-1], obs = y)
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real, "Observed" = col_obs)) +
ylab("Population/count") +
theme_bw()
dataStan <- list(y = y, TT = TT,
w0 = log(z[1])) # Starting population, 20 (number re-introduce)
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_point(data = pop.est.informed.sum, aes(x=year, y=pop.mean, colour = "Estimated")) +
geom_ribbon(data = pop.est.informed.sum, aes(x=year, y=pop.mean, ymin = lower, ymax = upper),
fill= alpha(col_real_est, 0.5)) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real,
"Observed" = col_obs,
"Estimated" = col_real_est)) +
ylab("Population/count") +
theme_bw()
m.biol.informed <- stan(file = "ssm_dens_biol_informed.stan",
data = dataStan,
chains = 3, iter = 50000, seed= "123")
traceplot(m.biol.informed, pars=c("sdo", "sdp", "beta1", "beta0"))
m.informed.post <- as.matrix(m.biol.informed)
sdo.est.informed <- m.informed.post[,"sdo"]
sdp.est.informed <- m.informed.post[,"sdp"]
beta0.est.informed <- m.informed.post[,"beta0"]
beta1.est.informed <- m.informed.post[,"beta1"]
# True pop. estimates
pop.est.informed <- exp(rstan::extract(m.biol.informed, pars = "w")[[1]]) # Modelled as log pop
pop.est.informed.sum <- data.frame(year= seq(2024-TT, length.out = TT),
pop.mean = colMeans(pop.est.informed),
t(apply(pop.est.informed, 2, quantile, probs=c(0.025, 0.975))))
colnames(pop.est.informed.sum)[3:4] <- c("lower", "upper")
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_point(data = pop.est.informed.sum, aes(x=year, y=pop.mean, colour = "Estimated")) +
geom_ribbon(data = pop.est.informed.sum, aes(x=year, y=pop.mean, ymin = lower, ymax = upper),
fill= alpha(col_real_est, 0.5)) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real,
"Observed" = col_obs,
"Estimated" = col_real_est)) +
ylab("Population/count") +
theme_bw()
m.informed.post <- as.matrix(m.biol.informed)
sdo.est.informed <- m.informed.post[,"sdo"]
sdp.est.informed <- m.informed.post[,"sdp"]
beta0.est.informed <- m.informed.post[,"beta0"]
beta1.est.informed <- m.informed.post[,"beta1"]
# True pop. estimates
pop.est.informed <- exp(rstan::extract(m.biol.informed, pars = "w")[[1]]) # Modelled as log pop
pop.est.informed.sum <- data.frame(year= seq(2024-TT, length.out = TT),
pop.mean = colMeans(pop.est.informed),
t(apply(pop.est.informed, 2, quantile, probs=c(0.05, 0.95))))
colnames(pop.est.informed.sum)[3:4] <- c("lower", "upper")
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_point(data = pop.est.informed.sum, aes(x=year, y=pop.mean, colour = "Estimated")) +
geom_ribbon(data = pop.est.informed.sum, aes(x=year, y=pop.mean, ymin = lower, ymax = upper),
fill= alpha(col_real_est, 0.5)) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real,
"Observed" = col_obs,
"Estimated" = col_real_est)) +
ylab("Population/count") +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
m.sim.informed <- stan(file = "ssm_dens_sim_informed.stan",
data = dataStan,
chains = 3, iter = 50000, seed="123")
plot_title <- ggtitle("Posterior distributions - vague",
"with medians and 80% intervals")
knitr::opts_chunk$set(echo = TRUE)
library(rstan)
library(bayesplot)
library(ggplot2)
# To run in parallel on multiple cores
options(mc.cores=parallel::detectCores())
# To avoid recompiling unchanged Stan program
rstan_options(auto_write=TRUE)
# Colours for plots
col_real <- "purple" # Real population trajectory
col_obs <- grey(0.2) # Observed population trajectory
col_real_est <- "hotpink"
# Create a vector that will keep track of the states
# It's of length T + 1 (+1 for t=0)
TT <- 20
z <- numeric(TT + 1)
# Population starts at 20 (number of individual re-introduced)
z[1] <- 20
# Standard deviation of the process variation
sdo <- 10
sdp <- 0.05
beta0 <- log(1.3)
beta1 <- -0.005
# Set the seed, so we can reproduce the results
set.seed(123)
# For-loop that simulates the state through time, using i instead of t,
for(i in 1:TT){
# This is the process equation
z[i+1] <- z[i]*exp(beta0 + beta1*z[i] + rnorm(1, 0, sdp))
# Note that this index is shifted compared to equation in text,
# because we assume the first value to be at time 0
}
# Create a vector that will keep track of the observations
# It's of length T
y <- numeric(TT)
# Standard deviation of the observation error
# For t=1, ... T, add measurement error
# Remember that z[1] is t=0
y <- z[2:(TT+1)] + rnorm(TT, 0, sdo)
monitoring <- data.frame(year = seq(2024-TT, length.out = TT), true = z[-1], obs = y)
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real, "Observed" = col_obs)) +
ylab("Population/count") +
theme_bw()
dataStan <- list(y = y, TT = TT,
w0 = log(z[1])) # Starting population, 20 (number re-introduce)
m.vague <- stan(file = "ssm_dens_vague.stan",
data = dataStan,
chains = 3, iter = 50000, seed="123")
traceplot(m.vague, pars=c("sdo", "sdp", "beta1", "beta0"))
# Posterior
m.vague.post <- as.matrix(m.vague)
sdo.est.vague <- m.vague.post[,"sdo"]
sdp.est.vague <- m.vague.post[,"sdp"]
beta0.est.vague <- m.vague.post[,"beta0"]
beta1.est.vague <- m.vague.post[,"beta1"]
m.sim.informed <- stan(file = "ssm_dens_sim_informed.stan",
data = dataStan,
chains = 3, iter = 50000, seed="123")
traceplot(m.sim.informed, pars=c("sdo", "sdp", "beta1", "beta0"))
m.biol.informed <- stan(file = "ssm_dens_biol_informed.stan",
data = dataStan,
chains = 3, iter = 50000, seed= "123")
traceplot(m.biol.informed, pars=c("sdo", "sdp", "beta1", "beta0"))
m.informed.post <- as.matrix(m.biol.informed)
sdo.est.informed <- m.informed.post[,"sdo"]
sdp.est.informed <- m.informed.post[,"sdp"]
beta0.est.informed <- m.informed.post[,"beta0"]
beta1.est.informed <- m.informed.post[,"beta1"]
# True pop. estimates
pop.est.informed <- exp(rstan::extract(m.biol.informed, pars = "w")[[1]]) # Modelled as log pop
pop.est.informed.sum <- data.frame(year= seq(2024-TT, length.out = TT),
pop.mean = colMeans(pop.est.informed),
t(apply(pop.est.informed, 2, quantile, probs=c(0.025, 0.975))))
colnames(pop.est.informed.sum)[3:4] <- c("lower", "upper")
ggplot() +
geom_point(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_point(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_line(data = monitoring, aes(y = true, x = year, colour = "Real")) +
geom_line(data = monitoring, aes(y = obs, x = year, colour = "Observed")) +
geom_point(data = pop.est.informed.sum, aes(x=year, y=pop.mean, colour = "Estimated")) +
geom_ribbon(data = pop.est.informed.sum, aes(x=year, y=pop.mean, ymin = lower, ymax = upper),
fill= alpha(col_real_est, 0.5)) +
scale_color_manual(name = "Pop. trajctories",
values = c("Real" = col_real,
"Observed" = col_obs,
"Estimated" = col_real_est)) +
ylab("Population/count") +
theme_bw()
ggplot() +
geom_density(sdo.est.vague, aes(depth, fill = cut, colour = cut), alpha = 0.1)
sdo.est.vague
vague <- cbind(sdo = sdo.est.vague, sdp = sdp.est.vague,
beta0 = beta0.est.vague, beta1 = beta1.est.vague)
ggplot() +
geom_density(vague, aes(sdo, fill = cut, colour = cut), alpha = 0.1)
?geom_density
diamons
diamonds
vague <- data.frame(sdo = sdo.est.vague, sdp = sdp.est.vague,
beta0 = beta0.est.vague, beta1 = beta1.est.vague)
ggplot() +
geom_density(vague, aes(sdo, fill = cut, colour = cut), alpha = 0.1)
ggplot() +
geom_density(vague, aes(sdo), alpha = 0.1)
vague <- data.frame(sdo = sdo.est.vague, sdp = sdp.est.vague,
beta0 = beta0.est.vague, beta1 = beta1.est.vague)
ggplot() +
geom_density(vague, aes(sdo), alpha = 0.1)
ggplot() +
geom_density(vague, aes(sdo))
ggplot() +
geom_density(diamonds, aes(carat))
ggplot() +
geom_density(vague, aes(y = sdo))
ggplot() +
geom_density(data = vague, aes(y = sdo))
ggplot() +
geom_density(data = vague, aes(x = sdo))
bio_inf <- data.frame(sdo = sdo.est.informed, sdp = sdp.est.informed,
beta0 = beta0.est.informed, beta1 = beta1.est.informed)
vague <- data.frame(sdo = sdo.est.vague, sdp = sdp.est.vague,
beta0 = beta0.est.vague, beta1 = beta1.est.vague)
bio_inf <- data.frame(sdo = sdo.est.informed, sdp = sdp.est.informed,
beta0 = beta0.est.informed, beta1 = beta1.est.informed)
vague <- data.frame(sdo = sdo.est.vague, sdp = sdp.est.vague,
beta0 = beta0.est.vague, beta1 = beta1.est.vague)
bio_inf <- data.frame(sdo = sdo.est.informed, sdp = sdp.est.informed,
beta0 = beta0.est.informed, beta1 = beta1.est.informed)
ggplot() +
geom_density(data = vague, aes(x = sdo, colour = "Vague")) +
geom_density(data = bio_inf, aes(x = sdo, colour = "Biol. Inf.")) +
scale_color_manual(name = "Priors",
values = c("Vague" = col_real, "Biol. Inf." = col_obs)) +
theme_bw()
ggplot() +
geom_density(data = vague, aes(x = sdo, colour = "Vague")) +
geom_density(data = bio_inf, aes(x = sdo, colour = "Biol. Inf.")) +
scale_color_manual(name = "Priors",
values = c("Vague" = col_real, "Biol. Inf." = col_obs)) +
xlim(min(sdo.est.informed), max(sdo.est.informed)) +
theme_bw()
ggplot() +
geom_density(data = vague, aes(x = sdo, colour = "Vague")) +
geom_density(data = bio_inf, aes(x = sdo, colour = "Biol. Inf.")) +
scale_color_manual(name = "Priors",
values = c("Vague" = col_real, "Biol. Inf." = col_obs)) +
xlim(quantile(sdo.est.vague, probs = 0.25), quantile(sdo.est.vague, probs = 0.75)) +
theme_bw()
ggplot() +
geom_density(data = vague, aes(x = sdo, colour = "Vague")) +
geom_density(data = bio_inf, aes(x = sdo, colour = "Biol. Inf.")) +
geom_vline(aes(xintercept = sdo), col="purple") +
scale_color_manual(name = "Priors",
ggplot() +
geom_density(data = vague, aes(x = sdo, colour = "Vague")) +
geom_density(data = bio_inf, aes(x = sdo, colour = "Biol. Inf.")) +
geom_vline(aes(xintercept = sdo), col="purple") +
scale_color_manual(name = "Priors",
values = c("Vague" = col_real, "Biol. Inf." = col_obs)) +
xlim(quantile(sdo.est.vague, probs = 0.3), quantile(sdo.est.vague, probs = 0.7)) +
theme_bw()
ggplot() +
geom_density(data = vague, aes(x = sdo, colour = "Vague")) +
geom_density(data = bio_inf, aes(x = sdo, colour = "Biol. Inf.")) +
geom_vline(aes(xintercept = sdo), col="purple") +
scale_color_manual(name = "Priors",
values = c("Vague" = col_real, "Biol. Inf." = col_obs)) +
xlim(quantile(sdo.est.vague, probs = 0.3), quantile(sdo.est.vague, probs = 0.7)) +
theme_bw()
ggplot() +
geom_density(data = vague, aes(x = sdo, colour = "Vague")) +
geom_density(data = bio_inf, aes(x = sdo, colour = "Biol. Inf.")) +
geom_vline(aes(xintercept = sdo), col="purple") +
scale_color_manual(name = "Priors",
values = c("Vague" = col_real, "Biol. Inf." = col_obs)) +
xlim(quantile(sdo.est.vague, probs = 0.3), quantile(sdo.est.vague, probs = 0.7)) +
theme_bw()
ggplot() +
geom_density(data = vague, aes(x = sdo, colour = "Vague")) +
geom_density(data = bio_inf, aes(x = sdo, colour = "Biol. Inf.")) +
geom_vline(aes(xintercept = sdo), col="purple") +
scale_color_manual(name = "Priors",
values = c("Vague" = col_real, "Biol. Inf." = col_obs)) +
xlim(quantile(sdo.est.vague, probs = 0.1), quantile(sdo.est.vague, probs = 0.9)) +
theme_bw()
plot_title <- ggtitle("Posterior distributions - sim informed",
"with medians and 80% intervals")
mcmc_intervals(m.sim.informed.post,
pars = c("sdo", "sdp", "beta0", "beta1"),
prob = 0.8) + plot_title +
geom_vline(aes(xintercept = sdp), col="hotpink") +
geom_vline(aes(xintercept = sdo), col="purple") +
geom_vline(aes(xintercept = beta0), col="blue") +
geom_vline(aes(xintercept = beta1), col="orange")
mcmc_interval(m.vague.post,
pars = c("sdo", "sdp", "beta0", "beta1"),
prob = 0.8) + plot_title +
geom_vline(aes(xintercept = sdp), col="hotpink") +
geom_vline(aes(xintercept = sdo), col="purple") +
geom_vline(aes(xintercept = beta0), col="blue") +
geom_vline(aes(xintercept = beta1), col="orange")
mcmc_intervals(m.vague.post,
pars = c("sdo", "sdp", "beta0", "beta1"),
prob = 0.8) + plot_title +
geom_vline(aes(xintercept = sdp), col="hotpink") +
geom_vline(aes(xintercept = sdo), col="purple") +
geom_vline(aes(xintercept = beta0), col="blue") +
geom_vline(aes(xintercept = beta1), col="orange")
mcmc_intervals(m.vague.post,
pars = c("sdo", "sdp", "beta0", "beta1"),
prob = 0.8) +
ggtitle("Posterior distributions - vague",
"with medians and 80% intervals") +
geom_vline(aes(xintercept = sdp), col="hotpink") +
geom_vline(aes(xintercept = sdo), col="purple") +
geom_vline(aes(xintercept = beta0), col="blue") +
geom_vline(aes(xintercept = beta1), col="orange")
mcmc_intervals(m.vague.post,
pars = c("sdo", "sdp", "beta0", "beta1"),
prob = 0.8) +
ggtitle("Posterior distributions - vague",
"with medians and 80% intervals") +
geom_vline(aes(xintercept = sdp), col="hotpink") +
geom_vline(aes(xintercept = sdo), col="purple") +
geom_vline(aes(xintercept = beta0), col="blue") +
geom_vline(aes(xintercept = beta1), col="orange") +
theme_bw()
mcmc_intervals(m.vague.inf,
pars = c("sdo", "sdp", "beta0", "beta1"),
prob = 0.8) +
ggtitle("Posterior distributions - vague",
"with medians and 80% intervals") +
geom_vline(aes(xintercept = sdp), col="hotpink") +
geom_vline(aes(xintercept = sdo), col="purple") +
geom_vline(aes(xintercept = beta0), col="blue") +
geom_vline(aes(xintercept = beta1), col="orange") +
theme_bw()
mcmc_intervals(m.vague.informed,
pars = c("sdo", "sdp", "beta0", "beta1"),
prob = 0.8) +
ggtitle("Posterior distributions - vague",
"with medians and 80% intervals") +
geom_vline(aes(xintercept = sdp), col="hotpink") +
geom_vline(aes(xintercept = sdo), col="purple") +
geom_vline(aes(xintercept = beta0), col="blue") +
geom_vline(aes(xintercept = beta1), col="orange") +
theme_bw()
mcmc_intervals(m.informed.post,
pars = c("sdo", "sdp", "beta0", "beta1"),
prob = 0.8) +
ggtitle("Posterior distributions - vague",
"with medians and 80% intervals") +
geom_vline(aes(xintercept = sdp), col="hotpink") +
geom_vline(aes(xintercept = sdo), col="purple") +
geom_vline(aes(xintercept = beta0), col="blue") +
geom_vline(aes(xintercept = beta1), col="orange") +
theme_bw()
m.vague.post
?mcmc_intervals
