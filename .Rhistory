install.packages("Sweave2knitr")
install.packages("knitr")
install.packages("rmarkdown")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:/Program Files/MiKTeX 2.9/miktex/bin/x64", sep=.Platform$path.sep))
install.packages("pdflatex")
install.packages("sweave")
# housekeeping
rm(list=ls())
options(stringsAsFactors = FALSE)
# load libraries
library(tidyverse)
library(ggplot2)
library(dplyr)
library(patchwork)
library(plotly)
library(gridExtra)
library(scales)
library(mgcv)
##reading in data##
setwd("~/Documents/GitHub/grit/data/PurpleAir/PurpleAir Data Download July-August")
setwd("~/GitHub/grit/data/PurpleAir/PurpleAir Data Download July-August")
PA_locs<-read.csv("~/Documents/GitHub/grit/analyses/output/grit_aq_lc_jul_aug.csv")
## 30 minute time intervals represents Purple Air averaging period, PA takes measurements average PM 2.5 of 30 min intervals,
PA_7384<-read.csv("7384 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_locs<-read.csv("../../analyses/output/grit_aq_lc_jul_aug.csv")
PA_locs<-read.csv("../../../analyses/output/grit_aq_lc_jul_aug.csv")
## 30 minute time intervals represents Purple Air averaging period, PA takes measurements average PM 2.5 of 30 min intervals,
PA_7384<-read.csv("7384 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_7384_jul<- PA_7384%>% slice(1:1488)
PA_7384_aug<-PA_7384%>% slice(1489:2975)
avg_jul_7384 <- mean(PA_7384_jul$pm2.5_atm)
avg_aug_7384 <- mean(PA_7384_aug$pm2.5_atm)
PA_9732<-read.csv("9732 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_9732_jul<- PA_9732%>% slice(1:1488)
PA_9732_aug<-PA_9732%>% slice(1489:2932)
avg_jul_9732 <- mean(PA_9732_jul$pm2.5_atm)
avg_aug_9732 <- mean(PA_9732_aug$pm2.5_atm)
PA_15203<-read.csv("15203 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_15203_jul<- PA_15203%>% slice(1:1488)
PA_15203_aug<-PA_15203%>% slice(1489:2977)
avg_jul_15203 <- mean(PA_15203_jul$pm2.5_atm)
avg_aug_15203<- mean(PA_15203_aug$pm2.5_atm)
PA_17663<-read.csv("17663 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_17663_jul<- PA_17663%>% slice(1:1488)
PA_17663_aug<-PA_17663%>% slice(1489:2977)
avg_jul_17663 <- mean(PA_17663_jul$pm2.5_atm)
avg_aug_17663<- mean(PA_15203_aug$pm2.5_atm)
PA_50485<-read.csv("50485 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_50485_jul<- PA_50485%>% slice(1:1488)
PA_50485_aug<-PA_50485%>% slice(1489:2977)
avg_jul_50485<-mean(PA_50485_jul$pm2.5_atm)
avg_aug_50485<-mean(PA_50485_aug$pm2.5_atm)
PA_51969<-read.csv("51969 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_51969_jul<- PA_51969%>% slice(1:1488)
PA_51969_aug<-PA_51969%>% slice(1489:2976)
avg_jul_51969<-mean(PA_51969_jul$pm2.5_atm)
avg_aug_51969<-mean(PA_51969_aug$pm2.5_atm)
PA_94745<-read.csv("94745 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_94745_jul<- PA_94745%>% slice(1:197) #few july obsv
PA_94745_aug<-PA_94745%>% slice(198:1685)
avg_jul_94745<-mean(PA_94745_jul$pm2.5_atm)
avg_aug_94745<-mean(PA_94745_aug$pm2.5_atm)
PA_98105<-read.csv("98105 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_98105_jul<- PA_98105%>% slice(1:1488)
PA_98105_aug<-PA_98105%>% slice(1489:2976)
avg_jul_98105<-mean(PA_98105_jul$pm2.5_atm)
avg_aug_98105<-mean(PA_98105_aug$pm2.5_atm)
PA_136172<-read.csv("136172 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_136172_jul<- PA_136172%>% slice(1:1485)
PA_136172_aug<-PA_136172%>% slice(1486:2970)
avg_jul_136172<-mean(PA_136172_jul$pm2.5_atm)
avg_aug_136172<-mean(PA_136172_aug$pm2.5_atm)
PA_156499<-read.csv("156499 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_156499_jul<- PA_156499%>% slice(1:1485)
PA_156499_aug<-PA_156499%>% slice(1486:2973)
avg_jul_156499<-mean(PA_156499_jul$pm2.5_atm)
avg_aug_156499<-mean(PA_156499_aug$pm2.5_atm)
PA_167065<-read.csv("167065 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_167065_jul<- PA_167065%>% slice(1:1485)
PA_167065_aug<-PA_167065%>% slice(1486:2973)
avg_jul_167065<-mean(PA_167065_jul$pm2.5_atm)
avg_aug_167065<-mean(PA_167065_aug$pm2.5_atm)
PA_167413<-read.csv("167413 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_167413_jul<- PA_167413%>% slice(1:1485)
PA_167413_aug<-PA_167413%>% slice(1486:2970)
avg_jul_167413<-mean(PA_167413_jul$pm2.5_atm)
avg_aug_167413<-mean(PA_167413_aug$pm2.5_atm)
PA_171177<-read.csv("171177 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_171177_jul<- PA_171177%>% slice(1:1488)
PA_171177_aug<-PA_171177%>% slice(1489:2976)
avg_jul_171177<-mean(PA_171177_jul$pm2.5_atm)
avg_aug_171177<-mean(PA_171177_aug$pm2.5_atm)
PA_171217<-read.csv("171217 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_171217_jul<- PA_171217%>% slice(1:1488)
PA_171217_aug<-PA_171217%>% slice(1489:2976)
avg_jul_171217<-mean(PA_171177_jul$pm2.5_atm)
avg_aug_171177<-mean(PA_171177_aug$pm2.5_atm)
PA_173501<-read.csv("173501 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_173501_jul<- PA_173501%>% slice(1:1485)
PA_173501_aug<-PA_173501%>% slice(1486:2822)
avg_jul_173501<-mean(PA_173501_jul$pm2.5_atm)
avg_aug_173501<-mean(PA_173501_aug$pm2.5_atm)
PA_174613<-read.csv("174613 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_174613_jul<- PA_174613%>% slice(1:1472)
PA_174613_aug<-PA_174613%>% slice(1473:2960)
avg_jul_174613<-mean(PA_174613_jul$pm2.5_atm)
avg_aug_174613<-mean(PA_174613_aug$pm2.5_atm)
PA_177979<-read.csv("177979 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_174613_jul<- PA_174613%>% slice(1:1472)
PA_174613_aug<-PA_174613%>% slice(1473:2960)
avg_jul_174613<-mean(PA_174613_jul$pm2.5_atm)
avg_aug_174613<-mean(PA_174613_aug$pm2.5_atm)
PA_183851<-read.csv("183851 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_183851_jul<- PA_183851%>% slice(1:1487)
PA_183851_aug<-PA_183851%>% slice(1488:2157)
avg_jul_183851<-mean(PA_183851_jul$pm2.5_atm)
avg_aug_183851<-mean(PA_183851_aug$pm2.5_atm)
PA_183853<-read.csv("183853 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_183853_jul<- PA_183853%>% slice(1:1385)
PA_183853_aug<-PA_183853%>% slice(1386:2873)
avg_jul_183853<-mean(PA_183853_jul$pm2.5_atm)
avg_aug_183853<-mean(PA_183853_aug$pm2.5_atm)
PA_183863<-read.csv("183863 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_183863_jul<- PA_183863%>% slice(1:1488)
PA_183863_aug<-PA_183863%>% slice(1489:2976)
avg_jul_183863<-mean(PA_183863_jul$pm2.5_atm)
avg_aug_183863<-mean(PA_183863_aug$pm2.5_atm)
PA_183883<-read.csv("183883 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_183883_jul<- PA_183883%>% slice(1:1488)
PA_183883_aug<-PA_183883%>% slice(1489:2976)
avg_jul_183883<-mean(PA_183883_jul$pm2.5_atm)
avg_aug_183883<-mean(PA_183883_aug$pm2.5_atm)
PA_185377<-read.csv("185377 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_185377_jul<- PA_185377%>% slice(1:1464)
PA_185377_aug<-PA_185377%>% slice(1465:2944)
avg_jul_185377<-mean(PA_185377_jul$pm2.5_atm)
avg_aug_185377<-mean(PA_185377_aug$pm2.5_atm)
PA_190605<-read.csv("190605 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_190605_jul<- PA_190605%>% slice(1:1199)
PA_190605_aug<-PA_190605%>% slice(1200:2177)
avg_jul_190605<-mean(PA_190605_jul$pm2.5_atm)
avg_aug_190605<-mean(PA_190605_aug$pm2.5_atm)
PA_192199<-read.csv("192199 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_192199_jul<- PA_192199%>% slice(1:1488)
PA_192199_aug<-PA_192199%>% slice(1489:2976)
avg_jul_192199<-mean(PA_192199_jul$pm2.5_atm)
avg_aug_192199<-mean(PA_192199_aug$pm2.5_atm)
PA_194473<-read.csv("194473 2024-07-01 2024-09-01 30-Minute Average.csv")
PA_194473_jul<- PA_194473%>% slice(1:1488)
PA_194473_aug<-PA_194473%>% slice(1489:2976)
avg_jul_194473<-mean(PA_194473_jul$pm2.5_atm)
avg_aug_194473<-mean(PA_194473_aug$pm2.5_atm)
pm2.5_jul<- c("2.116019","5.82093","5.14331","6.492079","4.611392",
"4.251417","8.076406","0.7244946","5.797343","7.325423",
"7.322094","8.075643","11.56277","5.243734","4.292885",
"3.012434","4.700846","5.214288","4.842592","3.01647",
"5.341509","3.577209")
pm2.5_aug <-c("4.18961616161616","7.51149899261249","7.7522439516129","7.47356821236559","7.41073501683502",
"7.11229905913979","8.65268511593119","0.773956989247312","7.51149899261249","8.22910223880597",
"8.43903696236559","8.42751142473118","10.9105114864865","9.46562116564417","7.14880309139785",
"6.58398588709677","7.51734381701215","8.12117809139785","6.27627774041695","7.97328864247312",
"7.23157860110803","5.7394435483871")
sensor<-c("136172","15203","156499","167065","167413",
"171177","173501","174613","17663","183851",
"183853","183883","185377","190605","192199",
"194473","50485","51969","7384","94745",
"9732","98105")
pm2.5 <- data.frame(sensor_index= sensor, pm2.5_jul= pm2.5_jul, pm2.5_aug=pm2.5_aug)
result <- merge(pm2.5, PA_locs, by = "sensor_index", all.x = TRUE)
result$pm2.5_jul<-as.numeric(result$pm2.5_jul)
result$pm2.5_aug <- as.numeric(result$pm2.5_aug)
mod_jul<-lm(pm2.5_jul~cancov.800m, data=result)
summary(mod_jul)
mod_aug<-lm(pm2.5_aug~cancov.800m, data=result)
y <- ggplot(result, aes(x = cancov.800m, y =pm2.5_jul))+
geom_point()+
stat_smooth(method="gam", method.args=list(family=gaussian))
gam_model <- gam(pm2.5_jul ~ s(cancov.40m), data = result, family = gaussian)
x <- ggplot(result, aes(x = cancov.40m)) +
geom_point(aes(y = pm2.5_aug, color = "August")) +
geom_point(aes(y = pm2.5_jul, color = "July")) +
geom_abline(intercept = coef(mod_jul)[1], slope = coef(mod_jul)[2], color = "black", linetype = "dashed")+
geom_abline(intercept = coef(mod_aug)[1], slope = coef(mod_aug)[2], color = "blue", linetype = "dashed") +
labs(y = "PM2.5", color = "Month") +
theme_minimal() +
scale_color_manual(values = c("August" = "blue", "July" = "black"))
##july##
annual_jul_136172 <- length(which(PA_136172_jul$pm2.5_atm>9))/2
annual_jul_15203<- length(which(PA_15203_jul$pm2.5_atm>9))/2
annual_jul_156499_jul<-length(which(PA_156499_jul$pm2.5_atm>9))/2
annual_jul_167065_jul<-length(which(PA_167065_jul$pm2.5_atm>9))/2
annual_jul_167413_jul<-length(which(PA_167413_jul$pm2.5_atm>9))/2
annual_jul_171177_jul<-length(which(PA_171177_jul$pm2.5_atm>9))/2
annual_PA_171217_jul<-length(which(PA_171217_jul$pm2.5_atm>9))/2
annual_PA_173501_jul<-length(which(PA_173501_jul$pm2.5_atm>9))/2
annual_PA_174613_jul<-length(which(PA_174613_jul$pm2.5_atm>9))/2
annual_PA_17663_jul<-length(which(PA_17663_jul$pm2.5_atm>9))/2
annual_PA_183851_jul<-length(which(PA_183851_jul$pm2.5_atm>9))/2
annual_PA_183853_jul<-length(which(PA_183853_jul$pm2.5_atm>9))/2
annual_PA_183863_jul<-length(which(PA_183863_jul$pm2.5_atm>9))/2
annual_PA_183883_jul<-length(which(PA_183883_jul$pm2.5_atm>9))/2
annual_PA_185377_jul<-length(which(PA_185377_jul$pm2.5_atm>9))/2
annual_PA_190605_jul<-length(which(PA_190605_jul$pm2.5_atm>9))/2
annual_PA_192199_jul<-length(which(PA_192199_jul$pm2.5_atm>9))/2
annual_PA_194473_jul<-length(which(PA_194473_jul$pm2.5_atm>9))/2
annual_PA_7384_jul<-length(which(PA_7384_jul$pm2.5_atm>9))/2
annual_PA_9732_jul<-length(which(PA_9732_jul$pm2.5_atm>9))/2
annual_PA_50485_jul<-length(which(PA_50485_jul$pm2.5_atm>9))/2
annual_PA_51969_jul<-length(which(PA_51969_jul$pm2.5_atm>9))/2
annual_PA_94745_jul<-length(which(PA_94745_jul$pm2.5_atm>9))/2
annual_PA_98105_jul<-length(which(PA_98105_jul$pm2.5_atm>9))/2
# Calculate values
values <- c(
annual_jul_136172,
annual_jul_15203,
annual_jul_156499_jul,
annual_jul_167065_jul,
annual_jul_167413_jul,
annual_jul_171177_jul,
annual_PA_171217_jul,
annual_PA_173501_jul,
annual_PA_174613_jul,
annual_PA_17663_jul,
annual_PA_183851_jul,
annual_PA_183853_jul,
annual_PA_183863_jul,
annual_PA_183883_jul,
annual_PA_185377_jul,
annual_PA_190605_jul,
annual_PA_192199_jul,
annual_PA_194473_jul,
annual_PA_7384_jul,
annual_PA_9732_jul,
annual_PA_50485_jul,
annual_PA_51969_jul,
annual_PA_94745_jul,
annual_PA_98105_jul
)
sensor_ids <- c(
"136172", "15203", "156499", "167065", "167413", "171177",
"171217", "173501", "174613", "17663", "183851", "183853",
"183863", "183883", "185377", "190605", "192199", "194473",
"7384", "9732", "50485", "51969", "94745", "98105"
)
annual_data <- data.frame(
sensor = sensor_ids, annual = values)
PM2.5_EPA_annual <- data.frame(yintercept = 9, Lines = 'Annual') # long-term standard (annual average)
annual <- ggplot(annual_data, aes(x=sensor, y=annual))+
geom_point()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
geom_hline(data = PM2.5_EPA_annual, aes(yintercept = yintercept,
color = "Annual Standard", linetype = "Annual"), linetype = "dashed")+
scale_color_manual(values = c("Annual Standard" = "red"),
labels = c("Annual Standard" = "9 µg/m3")) +
labs(color = "EPA Annual Standard", x="Sensor",
y = "# of Measurements Exceeding Standard")+
ggtitle("Purple Air (PA) Sensors and Number of Readings Exceeding EPA Standard July 2024",
subtitle = "30 Minute Averaging Period Readings")+
theme(legend.position = c(0.89, 0.89))
annual
y
x
#clear workspace
rm(list=ls())
#set strings default and avoid scientific notation for 6 digits
options(stringsAsFactors = FALSE, "scipen"=1000, "digits"=6)
library(dplyr)
library(lme4)
library(ggplot2)
library(car)
require(gridExtra)
library(RColorBrewer)
library(sf)
library(sp)
library(tidyverse)
library(ggpubr)#used in Locke et al 2020
library(sjPlot)
library(sjstats)
library(knitr)
#library(rgdal)  # for vector work; sp package should always load with rgdal.
library(raster)
library(sp)
library(maps)
library(mapdata)
library(tigris)
options(tigris_use_cache = TRUE)
setwd("/Users/samiebaclig/Documents/GitHub/grit")
#Read in lat/longs of air quality monitors
#(need to creat this file first based on the loggers chosen frmo PurpleAir Map)
locs<-read.csv("data/PurpleAir/ALL_PA_locs.csv", header=TRUE)
setwd("~/GitHub/grit")
#Read in lat/longs of air quality monitors
#(need to creat this file first based on the loggers chosen frmo PurpleAir Map)
locs<-read.csv("data/PurpleAir/ALL_PA_locs.csv", header=TRUE)
#correct mistake in locs
locs$longitude[locs$longitude==122.517100000000]<- -122.517100000000
locs_raw <-rename(locs)#, Longitude = x, Latitude = y)
#read in Puget Sound landcover layer from stormwater heat map (https://tnc.app.box.com/s/rephyio647qxpy44uuvaspkq8p8h4yfu)
lc <-
raster("~/Documents/Land Cover/psLandCover_mosaic.tif")
lcNOAA <-
raster("~/Documents/Land Cover/wa_2021_ccap_v2_hires_canopy_20240402.tif")
lcNOAA <-  raster("data/C-CAP/wa_2021_ccap_v2_hires_canopy_20240402.tif")
lc <-  raster("data/psLandCover_mosaic.tif")
st <- states()
tacoma <- places("WA", cb = TRUE) %>%
filter(NAME %in% c("Tacoma","Lakewood","University Place",
"Midland","Federal Way","Clover Creek","Fife")) %>%
st_transform(6580)
wa_outline <- states(cb = TRUE) %>%
filter(NAME == "Washington") %>%
st_transform(6580)
#plot
ggplot() +
geom_sf(data = wa_outline) +
geom_sf(data = tacoma, fill = "red", color = NA) +
theme_void()
locs = st_as_sf(locs_raw,coords=c("longitude","latitude"), crs="+proj=longlat +datum=WGS84")
locs <- st_transform(locs, crs(lc))
locs_NOAA <- st_transform(locs, crs(lcNOAA))
#tacoma2<-st_transform(tacoma, crs(lc))
tacoma2<-st_transform(tacoma, crs(lcNOAA))
bbox <- st_bbox(locs_NOAA)
etacrect <- as(raster::extent(bbox$xmin, bbox$xmax,bbox$ymin, bbox$ymax), "SpatialPolygons")
proj4string(etacrect) <- crs(lcNOAA)
plot(etacrect)
#instead of using tacoma2 shapefile, use tacrect_
lc_tacoma_NOAA<-crop(x = lcNOAA, y = etacrect)
lc_tacoma2_NOAA<-crop(x = lcNOAA, y = tacoma2)
locs_buffer10m = st_buffer(locs, 10)
locs_buffer20m = st_buffer(locs, 20)
locs_buffer30m = st_buffer(locs, 30)
locs_buffer40m = st_buffer(locs, 40)
locs_buffer50m = st_buffer(locs, 50)
locs_buffer100m = st_buffer(locs, 100)
locs_buffer200m = st_buffer(locs, 200)
locs_buffer400m = st_buffer(locs, 400)
locs_buffer800m = st_buffer(locs, 800)
locs_buffer10m$area_sqm <- st_area(locs_buffer10m)#
locs_buffer20m$area_sqm <- st_area(locs_buffer20m)#
locs_buffer30m$area_sqm <- st_area(locs_buffer30m)#
locs_buffer40m$area_sqm <- st_area(locs_buffer40m)#
locs_buffer50m$area_sqm <- st_area(locs_buffer50m)#
locs_buffer100m$area_sqm <- st_area(locs_buffer100m)#
locs_buffer200m$area_sqm <- st_area(locs_buffer200m)#
locs_buffer400m$area_sqm <- st_area(locs_buffer400m)#
locs_buffer800m$area_sqm <- st_area(locs_buffer800m)#
e10 <- raster::extract(x = lc_tacoma_NOAA,
y = locs_buffer10m,
df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
e20 <- raster::extract(x = lc_tacoma_NOAA,
y = locs_buffer20m,
df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
e30 <- raster::extract(x = lc_tacoma_NOAA,
y = locs_buffer30m,
df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
e40 <- raster::extract(x = lc_tacoma_NOAA,
y = locs_buffer40m,
df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
e50 <- raster::extract(x = lc_tacoma_NOAA,
y = locs_buffer50m,
df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
e100 <- raster::extract(x = lc_tacoma_NOAA,
y = locs_buffer100m,
df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
e200 <- raster::extract(x = lc_tacoma_NOAA,
y = locs_buffer200m,
df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
e400 <- raster::extract(x = lc_tacoma_NOAA,
y = locs_buffer400m,
df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
e800 <- raster::extract(x = lc_tacoma_NOAA,  y = locs_buffer800m, df = TRUE,method='simple', buffer=NULL, small=FALSE, cellnumbers=FALSE,
na.rm=FALSE, factors=FALSE)
ch4mn_graz<- 132.25# mg CH4 m^-2 d^-1 grazed
ch4sd_graz<- 34.22
ch4mn_ungr<-10.15#mg CH4 m^-2 d^-1 ungrazed
ch4sd_ungr<-2.06
nreps<-20 #replicates per study area
# simulate field data using the means, sds
ch4dat <- as.data.frame(cbind(
c(rep("graz",times=nreps),rep("ungr",times=nreps)),
c(rnorm(n = nreps, mean = ch4mn_graz, sd = ch4sd_graz),
rnorm(n = nreps, mean = ch4mn_ungr, sd = ch4sd_ungr))
))
colnames(ch4dat)<-c("lu","ch4")
ch4dat$ch4<-as.numeric(ch4dat$ch4)
ch4dat$lu<-as.factor(ch4dat$lu)
View(ch4dat)
View(ch4dat)
# convert mg CH4 m^-2 d^-1 to g CH4 ha^-yr
ch4dat$ch4_hayr<-as.numeric(ch4dat$ch4)*0.0365
ch4est<-brm(ch4_hayr~lu, data=ch4dat)
# load packages
library(brms)
ch4est<-brm(ch4_hayr~lu, data=ch4dat)
# check the model
summary(ch4est)
plot(ch4est)
# save the full posterior distribution/samples for later use (i.e. to propagate the estimated uncertainty)
ch4graz_samples <-posterior_samples(ch4est)$b_Intercept
ch4ungr_samples <-posterior_samples(ch4est)$b_Intercept+posterior_samples(ch4est)$b_luungr
as_draws(ch4est)
# Hypothetical project area extent
ext<-30000#ha
ch4emiss_ungr <-ch4ungr_samples*ext*0.001#*0.001 is to convert to kg from g
ch4emiss_graz <-ch4graz_samples*ext*0.001
ch4means<-c(mean(ch4emiss_graz),mean(ch4emiss_ungr))
ch4meds<-c(median(ch4emiss_graz),median(ch4emiss_ungr))
uncert<-cbind(quantile(ch4emiss_graz,c(.10,.90)),
quantile(ch4emiss_ungr,c(.10,.90)))
colnames(uncert)<-c("graz","ungr")
########################################
## Add uncertainty from extent        ##
########################################
ext_sd<-ext/5 #sd=20% of mean extent for noe for now
ext_unc<-rnorm(50,ext,ext_sd)
extmin<-min(ext_unc)
extmax<-max(ext_unc)
#with min estimated extent
ch4emiss_ungr_extmin <-ch4ungr_samples*extmin*0.001#*0.001 is to convert to kg from g
ch4emiss_graz_extmin <-ch4graz_samples*extmin*0.001
ch4means_extmin<-c(mean(ch4emiss_graz_extmin),mean(ch4emiss_ungr_extmin))
ch4meds_extmin<-c(median(ch4emiss_graz_extmin),median(ch4emiss_ungr_extmin))
uncert_extmin<-cbind(quantile(ch4emiss_graz_extmin,c(.10,.90)),
quantile(ch4emiss_ungr_extmin,c(.10,.90)))
colnames(uncert_extmin)<-c("graz","ungr")
#with max est. extent
ch4emiss_ungr_extmax <-ch4ungr_samples*extmax*0.001#*0.001 is to convert to kg from g
ch4emiss_graz_extmax <-ch4graz_samples*extmax*0.001
ch4means_extmax<-c(mean(ch4emiss_graz_extmax),mean(ch4emiss_ungr_extmax))
ch4meds_extmax<-c(median(ch4emiss_graz_extmax),median(ch4emiss_ungr_extmax))
uncert_extmax<-cbind(quantile(ch4emiss_graz_extmax,c(.10,.90)),
quantile(ch4emiss_ungr_extmax,c(.10,.90)))
colnames(uncert_extmax)<-c("graz","ungr")
x<-c(1,2)
plot(x,ch4meds,
type="p", pch=16, cex=1,col="darkgreen",
ylim=c(-1,250),xlim=c(.5,2.5),xaxt='n',cex.axis=2,
ylab="CH4 (kg per ha per yr)",xlab="Land Use",cex.lab=2,
main="CH4 Emissions in Project Area",
bty="l")
for(i in 1:length(x)){
arrows(x[i],uncert[1,i],x[i],uncert[2,i],
code=3, angle=90, length=0.05,lwd=2, col="darkgreen")
}
for(i in 1:length(x)){
arrows(x[i],uncert_extmin[1,i],x[i],uncert_extmax[2,i],
code=3, angle=90, length=0.05,lwd=2, col="lightgreen")
}
axis(1,at=x,labels=c("grazed","ungrazed"), cex.axis=2)
points(x,ch4meds,pch=16, cex=2.5,col="darkgreen",)
legend("topright",lty=1,lwd=3,col=c(,"darkgreen","lightgreen"), legend=c("Flux uncertainty","Area uncertainty"))
legend("topright",lty=1,lwd=3,col=c("darkgreen","lightgreen"), legend=c("Flux uncertainty","Area uncertainty"), bty="n")
plot(x,ch4meds,
type="p", pch=16, cex=1,col="darkgreen",
ylim=c(-1,250),xlim=c(.5,2.5),xaxt='n',cex.axis=2,
ylab="CH4 (kg per ha per yr)",xlab="Land Use",cex.lab=2,
main="CH4 Emissions in Project Area",
bty="l")
for(i in 1:length(x)){
arrows(x[i],uncert[1,i],x[i],uncert[2,i],
code=3, angle=90, length=0.05,lwd=2, col="darkgreen")
}
for(i in 1:length(x)){
arrows(x[i],uncert_extmin[1,i],x[i],uncert_extmax[2,i],
code=3, angle=90, length=0.05,lwd=2, col="lightgreen")
}
axis(1,at=x,labels=c("grazed","ungrazed"), cex.axis=2)
points(x,ch4meds,pch=16, cex=2.5,col="darkgreen",)
legend("topright",lty=1,lwd=3,col=c("darkgreen","lightgreen"), legend=c("Flux uncertainty","Area uncertainty"), bty="n")
png("figs/ncs/ncsprojimpactch4.png",height=600,width=800)
png("figs/ncs/ncsprojimpactch4.png",height=600,width=800)
png("figs/ncs/ncsprojimpactch4.png",height=600,width=800)
getwd()
setwd("~/GitHub/bayes4cons"
)
png("figs/ncs/ncsprojimpactch4.png",height=600,width=800)
plot(x,ch4meds,
type="p", pch=16, cex=1,col="darkgreen",
ylim=c(-1,250),xlim=c(.5,2.5),xaxt='n',cex.axis=2,
ylab="CH4 (kg per ha per yr)",xlab="Land Use",cex.lab=2,
main="CH4 Emissions in Project Area",
bty="l")
for(i in 1:length(x)){
arrows(x[i],uncert[1,i],x[i],uncert[2,i],
code=3, angle=90, length=0.05,lwd=2, col="darkgreen")
}
for(i in 1:length(x)){
arrows(x[i],uncert_extmin[1,i],x[i],uncert_extmax[2,i],
code=3, angle=90, length=0.05,lwd=2, col="lightgreen")
}
axis(1,at=x,labels=c("grazed","ungrazed"), cex.axis=2)
points(x,ch4meds,pch=16, cex=2.5,col="darkgreen",)
legend("topright",lty=1,lwd=3,col=c("darkgreen","lightgreen"), legend=c("Flux uncertainty","Area uncertainty"), bty="n")
dev.off()
